{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2bd5c459-3378-436c-b660-704ead5eabcb",
   "metadata": {},
   "source": [
    "Essai régression incluant l'indice de Gini"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "70534cfa-e809-477d-a67b-1890ca910568",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openpyxl\n",
      "  Downloading openpyxl-3.0.10-py2.py3-none-any.whl (242 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m242.1/242.1 kB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hCollecting et-xmlfile\n",
      "  Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n",
      "Installing collected packages: et-xmlfile, openpyxl\n",
      "Successfully installed et-xmlfile-1.1.0 openpyxl-3.0.10\n"
     ]
    }
   ],
   "source": [
    "!pip install openpyxl\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c99a3e86-2e7d-45b2-ae48-368162eb109a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b222b79f-f478-48ac-a27c-a85e73b94dbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel (\"ival-2021---complet-xlsx-112652.xlsx\", header = [0,1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55c6036b-dcd4-4811-a5e0-dccd228c4c86",
   "metadata": {},
   "outputs": [],
   "source": [
    "fichier_LGT = df.copy()\n",
    "fichier_LGT = fichier_LGT.drop ([\"Valeur ajoutée du taux d'accès\", \"Taux d'accès attendus\", \"Taux d'accès bruts\", \"Effectifs à la rentrée 2021\", \"Taux de mentions attendus\", \"Taux de réussite attendus\", \"Taux de mentions bruts\", \"Valeur ajoutée de taux de mentions\"], axis = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14b3a37c-a55d-49f7-a26e-752f2edff343",
   "metadata": {},
   "outputs": [],
   "source": [
    "fichier_LGT = fichier_LGT.fillna(0)\n",
    "#fichier.loc[:,(\"Nombre d'élèves présents au Bac\",\"Somme Pro\")] = fichier[\"Nombre d'élèves présents au Bac\", \"STMG\"] + fichier[\"Nombre d'élèves présents au Bac\", \"STI2D\"] + fichier[\"Nombre d'élèves présents au Bac\", \"STD2A\"]+fichier[\"Nombre d'élèves présents au Bac\", \"STL\"]+df_rose[\"Nombre d'élèves présents au Bac\", \"ST2S\"]+fichier[\"Nombre d'élèves présents au Bac\", \"S2TMD\"]+fichier[\"Nombre d'élèves présents au Bac\", \"STHR\"]#\n",
    "fichier_LGT.loc[:,(\"Nombre d'élèves présents au Bac\",\"Somme Techno\")] = fichier_LGT[\"Nombre d'élèves présents au Bac\", 'TOTAL']- fichier_LGT[\"Nombre d'élèves présents au Bac\", \"GNLE\"]\n",
    "fichier_LGT[\"Nombre d'élèves présents au Bac\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f052d0e2-4d4e-40b8-8943-e402c34d5daa",
   "metadata": {},
   "outputs": [],
   "source": [
    "stmg = fichier_LGT[\"Taux de réussite bruts\", \"STMG\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"STMG\"]\n",
    "sti2d = fichier_LGT[\"Taux de réussite bruts\", \"STI2D\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"STI2D\"]\n",
    "std2a = fichier_LGT[\"Taux de réussite bruts\", \"STD2A\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"STD2A\"]\n",
    "stl = fichier_LGT[\"Taux de réussite bruts\", \"STL\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"STL\"]\n",
    "st2s = fichier_LGT[\"Taux de réussite bruts\", \"ST2S\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"ST2S\"]\n",
    "s2tmd = fichier_LGT[\"Taux de réussite bruts\", \"S2TMD\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"S2TMD\"]\n",
    "sthr = fichier_LGT[\"Taux de réussite bruts\", \"STHR\"]*fichier_LGT[\"Nombre d'élèves présents au Bac\", \"STHR\"]\n",
    "taux_tech_brut = (stmg + sti2d + std2a + stl + st2s + s2tmd + sthr)/fichier_LGT[\"Nombre d'élèves présents au Bac\",\"Somme Techno\"]\n",
    "\n",
    "\n",
    "fichier_LGT.loc[(fichier_LGT[\"Nombre d'élèves présents au Bac\",\"Somme Techno\"] > 0.5),(\"Taux de réussite bruts\", \"Taux brut techno\")] = taux_tech_brut #>0.5 pour éviter erreurs d'arrondi de flottants#\n",
    "fichier_LGT[\"Taux de réussite bruts\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f83d7de2-a2f7-468f-8a09-7e5b03630bfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "liste= [\"GNLE\", \"STMG\", \"STI2D\", \"STD2A\", \"STL\", \"ST2S\", \"S2TMD\", \"STHR\", \"TOTAL\"]\n",
    "for i in liste:\n",
    "    fichier_LGT.loc[fichier_LGT[\"Valeur ajoutée du taux de réussite\", i] == \"ND\", (\"Valeur ajoutée du taux de réussite\", i)] = np.NaN\n",
    "    fichier_LGT[\"Valeur ajoutée du taux de réussite\", i] = pd.to_numeric(fichier_LGT[\"Valeur ajoutée du taux de réussite\", i])\n",
    "fichier_LGT[\"Valeur ajoutée du taux de réussite\"].info()\n",
    "fichier_LGT[\"Valeur ajoutée du taux de réussite\"]\n",
    "\n",
    "fichier_LGT.columns = fichier_LGT.columns.map('_'.join).str.strip('_')\n",
    "fichier_LGT = fichier_LGT.drop([\"Nombre d'élèves présents au Bac_STMG\",\"Nombre d'élèves présents au Bac_STI2D\", \"Nombre d'élèves présents au Bac_STD2A\", \"Nombre d'élèves présents au Bac_STL\", \"Nombre d'élèves présents au Bac_ST2S\",\"Nombre d'élèves présents au Bac_S2TMD\", \"Nombre d'élèves présents au Bac_STHR\", \"Taux de réussite bruts_STMG\",\n",
    "\"Taux de réussite bruts_STI2D\",\"Taux de réussite bruts_STD2A\",\"Taux de réussite bruts_STL\",\"Taux de réussite bruts_ST2S\",\"Taux de réussite bruts_S2TMD\",\"Taux de réussite bruts_STHR\", \"Valeur ajoutée du taux de réussite_STMG\",\"Valeur ajoutée du taux de réussite_STI2D\",\"Valeur ajoutée du taux de réussite_STD2A\", \"Valeur ajoutée du taux de réussite_STL\", \"Valeur ajoutée du taux de réussite_ST2S\", \"Valeur ajoutée du taux de réussite_S2TMD\", \"Valeur ajoutée du taux de réussite_STHR\"], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bd9c7db-7034-4fd5-8dad-283768a8bb80",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.read_excel (\"ival-2021---complet-xlsx-112652.xlsx\", sheet_name = 1, header = [0,1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fee1a598-5283-444c-84d3-457e7db2b960",
   "metadata": {},
   "outputs": [],
   "source": [
    "fichier_LP = df2.copy()\n",
    "fichier_LP = fichier_LP.drop ([\"Valeur ajoutée du taux d'accès\", \"Taux d'accès attendus\", \"Taux d'accès bruts\", \"Effectifs à la rentrée 2021\", \"Taux de mentions attendus\", \"Taux de réussite attendus\"], axis = 1)\n",
    "fichier_LP.columns = fichier_LP.columns.map('_'.join).str.strip('_')\n",
    "col_cons = ['Informations établissement_Académie', 'Informations établissement_Département', 'Informations établissement_Etablissement', 'Informations établissement_Ville', 'Informations établissement_UAI', 'Informations établissement_Code commune', 'Informations établissement_Secteur', \"Nombre d'élèves présents au Bac_TOTAL\", 'Taux de réussite bruts_TOTAL', 'Valeur ajoutée du taux de réussite_TOTAL']\n",
    "fichier_LP = fichier_LP[col_cons]\n",
    "fichier_LP = fichier_LP.rename(columns={\"Nombre d'élèves présents au Bac_TOTAL\": \"Nombre d'élèves présents au Bac_TOTAL_Pro\"})\n",
    "fichier_LP = fichier_LP.rename(columns={\"Taux de réussite bruts_TOTAL\" : \"Taux de réussite bruts_TOTAL_Pro\"})\n",
    "fichier_LP = fichier_LP.rename(columns={\"Taux de mentions bruts_TOTAL\" : \"Taux de mentions bruts_TOTAL_Pro\"})\n",
    "fichier_LP = fichier_LP.rename(columns={\"Valeur ajoutée du taux de réussite_TOTAL\" : \"Valeur ajoutée du taux de réussite_TOTAL_Pro\"})\n",
    "fichier_LP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7783769a-7208-4cf4-a23a-2adf4925c704",
   "metadata": {},
   "outputs": [],
   "source": [
    "dftotale = pd.concat([fichier_LGT, fichier_LP])\n",
    "dftotale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12eea7a3-f729-48c4-803d-9e5d518ec39e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_communes = pd.read_excel(\"FILO2019_DEC_COM.xlsx\", sheet_name = 1, header=[4,5])\n",
    "df_com = df_communes.copy()\n",
    "df_com = df_com.drop(['PMIMP19', 'Q119', 'Q319','Q3_Q1','D119', 'D219', 'D319', 'D419', 'D619', 'D719', 'D819', 'D919', 'RD', 'S80S2019', 'PACT19', 'PTSA19', 'PCHO19', 'PBEN19', 'PPEN19', 'PAUT19'], axis = 1, level = 1 )\n",
    "df_com\n",
    "\n",
    "df_com = df_com.dropna(axis = 0, how = \"any\")\n",
    "df_com\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6540485-7f4d-4c21-a846-92c5bfcb70be",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_com.columns = df_com.columns.map('_'.join).str.strip('_') #On indexe de manière simple la base de données des communes pour faciliter la jointure\n",
    "dflyccom = pd.merge(dftotale, df_com, how='left', left_on='Informations établissement_Code commune', right_on='Code géographique_CODGEO')\n",
    "dflyccom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb96b333-6dfd-4bd2-997d-6f47a0be1d5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "dfdef = dflyccom.copy()\n",
    "\n",
    "dfdef[\"Nombre d'élèves présents au Bac_GNLE\"]= dfdef[\"Nombre d'élèves présents au Bac_GNLE\"].replace(0, np.nan)\n",
    "dfdef[\"Nombre d'élèves présents au Bac_Somme Techno\"] = dfdef[\"Nombre d'élèves présents au Bac_Somme Techno\"].replace(0, np.nan)\n",
    "dfdef[\"Nombre d'élèves présents au Bac_TOTAL_Pro\"] = dfdef[\"Nombre d'élèves présents au Bac_TOTAL_Pro\"].replace(0, np.nan)\n",
    "for i in range(4329):\n",
    "    if np.isnan(dfdef.loc[dfdef.index[i], \"Nombre d'élèves présents au Bac_GNLE\"])==True: #Si personne ne s'est présenté au bac général\n",
    "        dfdef.loc[dfdef.index[i],\"Taux de réussite bruts_GNLE\"] = np.nan #On n'associe pas de valeur au taux de réussite brut\n",
    "        dfdef.loc[dfdef.index[i],\"Valeur ajoutée du taux de réussite_GNLE\"] = np.nan #On n'associe pas de valeur à la valeur ajoutée du taux de réussite\n",
    "    if np.isnan(dfdef.loc[dfdef.index[i], \"Nombre d'élèves présents au Bac_Somme Techno\"])==True: #Bac technologique \n",
    "        dfdef.loc[dfdef.index[i],\"Taux de réussite bruts_Taux brut techno\"] = np.nan\n",
    "        dfdef.loc[dfdef.index[i],\"Valeur ajoutée du taux de réussite_Valeur ajoutée techno\"] = np.nan\n",
    "    if np.isnan(dfdef.loc[dfdef.index[i], \"Nombre d'élèves présents au Bac_TOTAL_Pro\"])==True: #Bac Pro\n",
    "        dfdef.loc[dfdef.index[i],\"Taux de réussite bruts_TOTAL_Pro\"] = np.nan\n",
    "        dfdef.loc[dfdef.index[i], \"Valeur ajoutée du taux de réussite_TOTAL_Pro\"] =np.nan\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5f48db35-0d4b-4617-a404-1fec796604e8",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/compat/_optional.py:141\u001b[0m, in \u001b[0;36mimport_optional_dependency\u001b[0;34m(name, extra, errors, min_version)\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 141\u001b[0m     module \u001b[38;5;241m=\u001b[39m \u001b[43mimportlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimport_module\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    142\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m:\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/importlib/__init__.py:126\u001b[0m, in \u001b[0;36mimport_module\u001b[0;34m(name, package)\u001b[0m\n\u001b[1;32m    125\u001b[0m         level \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m--> 126\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_bootstrap\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_gcd_import\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m[\u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpackage\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m<frozen importlib._bootstrap>:1050\u001b[0m, in \u001b[0;36m_gcd_import\u001b[0;34m(name, package, level)\u001b[0m\n",
      "File \u001b[0;32m<frozen importlib._bootstrap>:1027\u001b[0m, in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n",
      "File \u001b[0;32m<frozen importlib._bootstrap>:1004\u001b[0m, in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'openpyxl'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [3], line 8\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlinear_model\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LinearRegression\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m r2_score\n\u001b[0;32m----> 8\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_excel\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mival-2021---complet-xlsx-112652.xlsx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     10\u001b[0m fichier_LGT \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[1;32m     11\u001b[0m fichier_LGT \u001b[38;5;241m=\u001b[39m fichier_LGT\u001b[38;5;241m.\u001b[39mdrop ([\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValeur ajoutée du taux d\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccès\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTaux d\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccès attendus\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTaux d\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccès bruts\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEffectifs à la rentrée 2021\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTaux de mentions attendus\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTaux de réussite attendus\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTaux de mentions bruts\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValeur ajoutée de taux de mentions\u001b[39m\u001b[38;5;124m\"\u001b[39m], axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m)\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/util/_decorators.py:211\u001b[0m, in \u001b[0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    210\u001b[0m         kwargs[new_arg_name] \u001b[38;5;241m=\u001b[39m new_arg_value\n\u001b[0;32m--> 211\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/util/_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[1;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[1;32m    330\u001b[0m     )\n\u001b[0;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/io/excel/_base.py:482\u001b[0m, in \u001b[0;36mread_excel\u001b[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, decimal, comment, skipfooter, convert_float, mangle_dupe_cols, storage_options)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(io, ExcelFile):\n\u001b[1;32m    481\u001b[0m     should_close \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m--> 482\u001b[0m     io \u001b[38;5;241m=\u001b[39m \u001b[43mExcelFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mio\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mengine\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    483\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m engine \u001b[38;5;129;01mand\u001b[39;00m engine \u001b[38;5;241m!=\u001b[39m io\u001b[38;5;241m.\u001b[39mengine:\n\u001b[1;32m    484\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    485\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEngine should not be specified when passing \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    486\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124man ExcelFile - ExcelFile already has the engine set\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    487\u001b[0m     )\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/io/excel/_base.py:1695\u001b[0m, in \u001b[0;36mExcelFile.__init__\u001b[0;34m(self, path_or_buffer, engine, storage_options)\u001b[0m\n\u001b[1;32m   1692\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mengine \u001b[38;5;241m=\u001b[39m engine\n\u001b[1;32m   1693\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstorage_options \u001b[38;5;241m=\u001b[39m storage_options\n\u001b[0;32m-> 1695\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reader \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engines\u001b[49m\u001b[43m[\u001b[49m\u001b[43mengine\u001b[49m\u001b[43m]\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_io\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/io/excel/_openpyxl.py:556\u001b[0m, in \u001b[0;36mOpenpyxlReader.__init__\u001b[0;34m(self, filepath_or_buffer, storage_options)\u001b[0m\n\u001b[1;32m    541\u001b[0m \u001b[38;5;129m@doc\u001b[39m(storage_options\u001b[38;5;241m=\u001b[39m_shared_docs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstorage_options\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m    542\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\n\u001b[1;32m    543\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    544\u001b[0m     filepath_or_buffer: FilePath \u001b[38;5;241m|\u001b[39m ReadBuffer[\u001b[38;5;28mbytes\u001b[39m],\n\u001b[1;32m    545\u001b[0m     storage_options: StorageOptions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    546\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    547\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    548\u001b[0m \u001b[38;5;124;03m    Reader using openpyxl engine.\u001b[39;00m\n\u001b[1;32m    549\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    554\u001b[0m \u001b[38;5;124;03m    {storage_options}\u001b[39;00m\n\u001b[1;32m    555\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 556\u001b[0m     \u001b[43mimport_optional_dependency\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mopenpyxl\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    557\u001b[0m     \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__init__\u001b[39m(filepath_or_buffer, storage_options\u001b[38;5;241m=\u001b[39mstorage_options)\n",
      "File \u001b[0;32m/opt/mamba/lib/python3.10/site-packages/pandas/compat/_optional.py:144\u001b[0m, in \u001b[0;36mimport_optional_dependency\u001b[0;34m(name, extra, errors, min_version)\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m:\n\u001b[1;32m    143\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 144\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m(msg)\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    146\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "\u001b[0;31mImportError\u001b[0m: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl."
     ]
    }
   ],
   "source": [
    "df_reg = dfdef[[ \"Médiane (€)_Q219\", \"Indice de Gini_GI19\", \"Taux de réussite bruts_GNLE\"]]\n",
    "df_reg = df_reg.dropna(axis = 0, how = \"any\")\n",
    "df_reg\n",
    "\n",
    "y = df_reg[[\"Taux de réussite bruts_GNLE\"]]\n",
    "X = df_reg [[\"Médiane (€)_Q219\", \"Indice de Gini_GI19\"]]\n",
    "\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "model = sm.OLS(y, X).fit()\n",
    "\n",
    "print(model.summary())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "216a2792-7e76-4265-95df-d9424ce23a79",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
